[{"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\index.js":"1","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\App.js":"2","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\web3-context.js":"3","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\index.js":"4","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\getWeb3.js":"5","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Navigation.jsx":"6","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Tally.jsx":"7","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Home.jsx":"8","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Footer.jsx":"9","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Vote.jsx":"10","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\CreateBallot.jsx":"11","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\businessLayer\\RegistrationBL.js":"12","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\businessLayer\\CreateBallotBL.js":"13"},{"size":178,"mtime":1623094972702,"results":"14","hashOfConfig":"15"},{"size":1898,"mtime":1623321505243,"results":"16","hashOfConfig":"15"},{"size":1358,"mtime":1623265260231,"results":"17","hashOfConfig":"15"},{"size":290,"mtime":1623321505312,"results":"18","hashOfConfig":"15"},{"size":1179,"mtime":1623094972701,"results":"19","hashOfConfig":"15"},{"size":3084,"mtime":1623321505278,"results":"20","hashOfConfig":"15"},{"size":2071,"mtime":1623321505280,"results":"21","hashOfConfig":"15"},{"size":2669,"mtime":1623321505275,"results":"22","hashOfConfig":"15"},{"size":364,"mtime":1623094972520,"results":"23","hashOfConfig":"15"},{"size":3527,"mtime":1623265260084,"results":"24","hashOfConfig":"15"},{"size":10922,"mtime":1623265260081,"results":"25","hashOfConfig":"15"},{"size":794,"mtime":1623265260076,"results":"26","hashOfConfig":"15"},{"size":2484,"mtime":1623094972517,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tonkdg",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\index.js",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\App.js",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\web3-context.js",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\index.js",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\getWeb3.js",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Navigation.jsx",["58","59","60","61"],"import React, {Component} from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Web3Context } from \"../web3-context\";\r\n\r\nclass Navigation extends Component {\r\n\r\n  static contextType = Web3Context;\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: ''\r\n      , fields: {}\r\n      , errors: {}\r\n      , ballot: true\r\n      , ballot_confirm: false\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { ballot, ballot_confirm } = this.state;\r\n    return (\r\n      <div className=\"navigation\">\r\n        <nav className=\"navbar navbar-expand-md navbar-dark\">\r\n          <Link className=\"navbar-brand nav-logo\" to=\"/\">\r\n            DZK\r\n        </Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n            data-target=\"#navbarSupportedContent\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n\r\n          <div className=\"container\">\r\n            <div className=\"collapse navbar-collapse ml-auto\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav ml-auto mb-2 mb-lg-0\">\r\n                <li\r\n                  className={`nav-item  ${this.props.location.pathname === \"/\" ? \"active\" : \"\"\r\n                    }`}\r\n                >\r\n                  <Link className=\"nav-link nav-links-right\" to=\"/\">\r\n                    Home\r\n                  <span className=\"sr-only\">(current)</span>\r\n                  </Link>\r\n                </li>\r\n                <li\r\n                  className={`nav-item  ${this.props.location.pathname === \"/CreateBallot\" ? \"active\" : \"\"\r\n                    }`}\r\n                >\r\n                  <Link className=\"nav-link nav-links-right\" to=\"/CreateBallot\">\r\n                    Create Ballot\r\n                </Link>\r\n                </li>\r\n                <li\r\n                  className={`nav-item  ${this.props.location.pathname === \"/vote\" ? \"active\" : \"\"\r\n                    }`}\r\n                >\r\n                  <Link className=\"nav-link nav-links-right\" to=\"/vote\">\r\n                    Vote\r\n                </Link>\r\n                </li>\r\n\r\n                <li className=\"nav-item dropdown\">\r\n                  <a className=\"nav-link dropdown-toggle nav-links-right\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    Account\r\n                  </a>\r\n                  <ul className=\"dropdown-menu dropdown-menu-right text-center\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n                    <br></br>\r\n                    <p className=\"address-dropdown\">\r\n                      <h5>Account Address</h5>\r\n                      <h6>{this.context.account.toString()}</h6>\r\n                    </p>\r\n\r\n                    <div className=\"dropdown-divider\"></div>\r\n                    <li><a className=\"dropdown-item\" href=\"#\">Sign out</a></li>\r\n                  </ul>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(Navigation);","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Tally.jsx",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Home.jsx",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Footer.jsx",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\Vote.jsx",[],"C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\components\\CreateBallot.jsx",["62","63"],"import React, {Component} from \"react\";\r\nimport {Web3Context} from \"../web3-context\";\r\nimport CreateBallotBL from \"../businessLayer/CreateBallotBL\";\r\n\r\nclass CreateBallot extends Component {\r\n\r\n    static contextType = Web3Context;\r\n    // create the businessLayer class\r\n    BL = new CreateBallotBL();\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: ''\r\n            , fields: {}\r\n            , errors: {}\r\n            , ballot: true\r\n            , ballot_confirm: false\r\n            , value: \"\" // Used to show the ballot's confirmation\r\n            , eligible: \"\"\r\n            , transaction: \"\"\r\n\r\n        }\r\n\r\n        this.fileInput = React.createRef();\r\n\r\n        this.BL.getBallotStatement().then(returnValue => {\r\n            this.setState({value: returnValue});\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    contactSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (this.handleValidation()) {\r\n\r\n            this.setState({ballot: false});\r\n            this.setState({ballot_confirm: true});\r\n\r\n\r\n        } else {\r\n            alert(\"Form has errors.\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    handleChange(field, e) {\r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;\r\n        this.setState({fields});\r\n    }\r\n\r\n\r\n    handleValidation() {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n        let today = new Date();\r\n\r\n        //check if fields is not empty \r\n        formIsValid = this.handleEmpty(\"BallotName\", formIsValid, fields, errors, 1);\r\n        formIsValid = this.handleEmpty(\"Cand1\", formIsValid, fields, errors, 1);\r\n        formIsValid = this.handleEmpty(\"Cand2\", formIsValid, fields, errors, 1);\r\n\r\n        //handle date/time empty fields \r\n        formIsValid = this.handleEmpty(\"date_Reg_start\", formIsValid, fields, errors, 2);\r\n        formIsValid = this.handleEmpty(\"Time_Reg_start\", formIsValid, fields, errors, 3);\r\n        formIsValid = this.handleEmpty(\"date_Reg_end\", formIsValid, fields, errors, 2);\r\n        formIsValid = this.handleEmpty(\"Time_Reg_end\", formIsValid, fields, errors, 3);\r\n\r\n\r\n        //check if txt file is not attached\r\n        formIsValid = this.handleEmpty(\"txtfile\", formIsValid, fields, errors, 4);\r\n\r\n        var date1 = new Date(fields[\"date_Reg_start\"]);\r\n        var date2 = new Date(fields[\"date_Reg_end\"]);\r\n\r\n        // we need to compare with current date \r\n        //first we need to switch the fields to become dates \r\n\r\n        if (date1.getTime() <= today.getTime()) {\r\n            formIsValid = false;\r\n            errors[\"date_Reg_start\"] = \"This date has already passed !\";\r\n        }\r\n        if (date2.getTime() <= today.getTime()) {\r\n            formIsValid = false;\r\n            errors[\"date_Reg_end\"] = \"This date has already passed !\";\r\n        }\r\n\r\n\r\n        if (fields[\"date_Reg_start\"] >= fields[\"date_Reg_end\"]) {\r\n            formIsValid = false;\r\n            errors[\"date_Reg_start\"] = \"Invalid date selected\";\r\n            errors[\"date_Reg_end\"] = \"Invalid date selected\";\r\n        }\r\n        if (!formIsValid) //if empty fields , then dont continue the validation of txt file\r\n        {\r\n            this.setState({errors: errors});\r\n            return formIsValid;\r\n        }\r\n\r\n        //check if the uploaded file is txt file \r\n\r\n        var textfile = /text.*/;\r\n\r\n        var file = document.querySelector('input[type=file]').files[0];\r\n\r\n        if (!file.type.match(textfile)) {\r\n            formIsValid = false;\r\n            errors[\"txtfile\"] = \"The selected file is not text file !\";\r\n        }\r\n        //read whole file\r\n        //then adding each address to the 'eligible' array\r\n\r\n\r\n        let reader = new FileReader();\r\n        let content = \"\";\r\n        let eligible = this.eligible;\r\n        reader.onload = function (event) {\r\n            content = event.target.result;\r\n\r\n            eligible = content.split(\" \");  // Addresses are seperated by space \r\n            //example in the txt file \r\n            //0x4C9888760b55cb7936a00C1Ac2b47884B39eE11C 0xA58CD4f6e5D10e7341D6CdB2Cf3E981d748B561A 0x2263d2b738592652A16683afA86c1481c1F615f4BA\r\n\r\n            //first change the date and time to unix \r\n\r\n            this.setState({eligible: eligible});\r\n            var start_date = this.state.fields[\"date_Reg_start\"] + \"T\" + this.state.fields[\"Time_Reg_start\"];\r\n            var end_date = this.state.fields[\"date_Reg_end\"] + \"T\" + this.state.fields[\"Time_Reg_end\"];\r\n            var unix_start_date = parseInt((new Date(start_date).getTime() / 1000).toFixed(0));\r\n            var unix_end_date = parseInt((new Date(end_date).getTime() / 1000).toFixed(0));\r\n\r\n\r\n            //call the create ballot \r\n            this.BL.creatBallot(this.context.account[0],\r\n                this.state.fields[\"BallotName\"],\r\n                this.state.fields[\"Cand1\"],\r\n                this.state.fields[\"Cand2\"],\r\n                unix_start_date,\r\n                unix_end_date,\r\n                12,\r\n                eligible).then(response => {\r\n                this.setState({transaction: response});\r\n                console.log(response);\r\n\r\n                this.BL.getBallotStatement().then(returnValue => {\r\n                    this.setState({value: returnValue});\r\n                })\r\n            })\r\n\r\n\r\n        }.bind(this)\r\n        reader.readAsText(file);\r\n\r\n\r\n        this.setState({errors: errors});\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    handleEmpty(string, valid, fields, errors, num) {\r\n        if (!fields[string]) {\r\n            if (num === 1)\r\n                errors[string] = \"Empty field!\";\r\n            else if (num === 2)\r\n                errors[string] = \"Date is empty!\";\r\n            else if (num === 3)\r\n                errors[string] = \"Time is empty!\";\r\n            else\r\n                errors[string] = \"Please attach a text file!\";\r\n\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        const {ballot, ballot_confirm} = this.state;\r\n\r\n\r\n        return (\r\n\r\n            <div>\r\n\r\n                {this.state.ballot &&  // show when ballot = true\r\n                <div>\r\n\r\n\r\n                    <form onSubmit={this.contactSubmit.bind(this)} className=\"form\">\r\n                        <br/>\r\n                        <label htmlFor=\"Contract-name\">Ballot Name</label>\r\n                        <input type=\"text\" id=\"Contract-name\" name=\"Ballot Name\" placeholder=\"Enter the name of ballot\"\r\n                               onChange={this.handleChange.bind(this, \"BallotName\")}\r\n                               value={this.state.fields[\"BallotName\"]}/>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"BallotName\"]}</span>\r\n                        <br/>\r\n                        <label htmlFor=\"Candidate-Name\"> Write your options </label>\r\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                            <input type=\"text\" id=\"Cand-1\" name=\"Cand-1\" placeholder=\"Enter the first option\"\r\n                                   onChange={this.handleChange.bind(this, \"Cand1\")} value={this.state.fields[\"Cand1\"]}/>\r\n                            <input type=\"text\" id=\"Cand-2\" name=\"Cand-2\" placeholder=\"Enter the second option\"\r\n                                   onChange={this.handleChange.bind(this, \"Cand2\")} value={this.state.fields[\"Cand2\"]}/>\r\n                        </div>\r\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                            <span style={{color: \"red\"}}>{this.state.errors[\"Cand1\"]}</span>\r\n                            <span style={{color: \"red\"}}>{this.state.errors[\"Cand2\"]}</span>\r\n                        </div>\r\n                        <br/>\r\n                        <label htmlFor=\"TimeStamps\">Enter the timestamp of each phase : <br/> </label>\r\n                        <br/><br/>\r\n                        <label htmlFor=\"Reg-Time\" style={{color: '#db1818'}}>&emsp;\r\n                            <mark><b>Registration for the ballot will start as soon as the ballot is created </b></mark>\r\n                        </label>\r\n                        <br/><br/>\r\n                        <label htmlFor=\"Reg-Time\">Voting phase start &emsp;</label>\r\n                        <input id=\"date_Reg_Start\" type=\"date\" onChange={this.handleChange.bind(this, \"date_Reg_start\")}\r\n                               value={this.state.fields[\"date_Reg_start\"]}/>\r\n\r\n                        <input id=\"time_Reg_Start\" type=\"time\" onChange={this.handleChange.bind(this, \"Time_Reg_start\")}\r\n                               value={this.state.fields[\"Time_Reg_start\"]}/>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"date_Reg_start\"]}</span>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"Time_Reg_start\"]}</span>\r\n\r\n                        <label htmlFor=\"Reg-Time\">&emsp;Voting phase end&emsp;</label>\r\n                        <input id=\"date_Reg_End\" type=\"date\" onChange={this.handleChange.bind(this, \"date_Reg_end\")}\r\n                               value={this.state.fields[\"date_Reg_end\"]}/>\r\n                        <input id=\"time_Reg_End\" type=\"time\" onChange={this.handleChange.bind(this, \"Time_Reg_end\")}\r\n                               value={this.state.fields[\"Time_Reg_end\"]}/>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"date_Reg_end\"]}</span>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"Time_Reg_end\"]}</span>\r\n\r\n\r\n                        <br/>\r\n                        <br/>\r\n                        <label htmlFor=\"Tally\" style={{color: '#db1818'}}>&emsp;\r\n                            <mark><b> Tally phase will start automatically\r\n                                after voting phase is over</b></mark>\r\n                        </label>\r\n                        <br/><br/>\r\n\r\n                        <label htmlFor=\"myfile\">Select a text file containing the eligible voter's\r\n                            addresses: &emsp;&emsp; </label>\r\n\r\n                        <input type=\"file\" id=\"myfile\" name=\"myfile\" onChange={this.handleChange.bind(this, \"txtfile\")}\r\n                               value={this.state.fields[\"txtfile\"]} ref={this.fileInput}/>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"txtfile\"]}</span>\r\n                        <br/>\r\n                        <br/>\r\n                        <input type=\"submit\"/>\r\n\r\n                    </form>\r\n\r\n                </div>\r\n                }\r\n\r\n                {this.state.ballot_confirm && // when creation is complete\r\n                <div>\r\n                    <h3 style={{margin: 60}}> {this.state.transaction} </h3>\r\n                    <h2> Statement is {this.state.value}</h2>\r\n\r\n\r\n                </div>\r\n\r\n                }\r\n\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateBallot;","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\businessLayer\\RegistrationBL.js",["64"],"const EC = require('elliptic').ec;\r\n\r\nexport default class RegistrationBL {\r\n    votingContract = window.votingContract;\r\n    ZkpContract = window.localZkpContract;\r\n\r\n    // returns boolean if user is eligible to vote or not\r\n    async isEligible(address) {\r\n        return await this.votingContract.methods.eligible(address).call()\r\n    }\r\n\r\n    // returns boolean if user is registered or not\r\n    async isRegistered(address) {\r\n        return await this.votingContract.methods.registered(address).call()\r\n    }\r\n\r\n    // returns Integer of minimum deposit to register\r\n    async getMinimumDeposit() {\r\n        return parseInt(await this.votingContract.methods.minDeposit().call());\r\n    }\r\n\r\n    // takes: address:String , deposit:Integer\r\n    async register(address, deposit) {\r\n\r\n    }\r\n}","C:\\Users\\hp pavilion\\Desktop\\Senior Project\\DZK_Vote\\src\\businessLayer\\CreateBallotBL.js",["65"],"const lineByLine = require('n-readlines');\r\n\r\nexport default class CreateBallotBL {\r\n    contract = window.votingContract;\r\n\r\n    async creatBallot(adminAddress, ballotStatement, option1, option2, endRegistrationPhase, endVotingPhase,\r\n                      depositRequired, addresses) {\r\n        try {\r\n            const success = await this.contract.methods.creatBallot(\r\n                ballotStatement,\r\n                option1,\r\n                option2,\r\n                endRegistrationPhase,\r\n                endVotingPhase,\r\n                depositRequired,\r\n                addresses\r\n            ).call({from: adminAddress});\r\n\r\n            if (success) {\r\n                await this.contract.methods.creatBallot(\r\n                    ballotStatement,\r\n                    option1,\r\n                    option2,\r\n                    endRegistrationPhase,\r\n                    endVotingPhase,\r\n                    depositRequired,\r\n                    addresses\r\n                ).send({from: adminAddress});\r\n                return \"Transaction Confirmed\";\r\n            } else {\r\n                return \"Transaction Failed\";\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n            return \"Transaction Failed\";\r\n        }\r\n    }\r\n\r\n    // edit as preferred\r\n    async getBallotStatement() {\r\n        return await  this.contract.methods.ballotName().call() + \"\\n\\nCandidates are :\\n \\t\" +\r\n            await this.contract.methods.options(0).call() + \" \" +\r\n            await this.contract.methods.options(1).call() ;\r\n    }\r\n\r\n    async addEligible(adminAddress, addresses) {\r\n        try {\r\n            const success = await this.contract.methods.addEligible(addresses).call({from: adminAddress});\r\n            if (success) {\r\n                await this.contract.methods.addEligible(addresses).send({from: adminAddress});\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (e) {\r\n            console.log(e.message);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // todo: not tested!!\r\n    readAddressesFromFile(filePath) {\r\n        const liner = new lineByLine(filePath);\r\n        let line;\r\n        const array = [];\r\n        while (line = liner.next()) {\r\n            array.push(line);\r\n        }\r\n        return array;\r\n    }\r\n\r\n    //Split the content of the file\r\n    splitArray(array){\r\n        var splitted = array.split(\" \"); \r\n        return splitted;\r\n    }\r\n\r\n\r\n}",{"ruleId":"66","severity":1,"message":"67","line":22,"column":13,"nodeType":"68","messageId":"69","endLine":22,"endColumn":19},{"ruleId":"66","severity":1,"message":"70","line":22,"column":21,"nodeType":"68","messageId":"69","endLine":22,"endColumn":35},{"ruleId":"71","severity":1,"message":"72","line":64,"column":19,"nodeType":"73","endLine":64,"endColumn":174},{"ruleId":"71","severity":1,"message":"72","line":75,"column":25,"nodeType":"73","endLine":75,"endColumn":63},{"ruleId":"66","severity":1,"message":"67","line":187,"column":16,"nodeType":"68","messageId":"69","endLine":187,"endColumn":22},{"ruleId":"66","severity":1,"message":"70","line":187,"column":24,"nodeType":"68","messageId":"69","endLine":187,"endColumn":38},{"ruleId":"66","severity":1,"message":"74","line":1,"column":7,"nodeType":"68","messageId":"69","endLine":1,"endColumn":9},{"ruleId":"75","severity":1,"message":"76","line":66,"column":16,"nodeType":"77","messageId":"78","endLine":66,"endColumn":35},"no-unused-vars","'ballot' is assigned a value but never used.","Identifier","unusedVar","'ballot_confirm' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'EC' is assigned a value but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing"]