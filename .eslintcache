[{"C:\\Users\\Jarvis\\DZK_Vote\\src\\index.js":"1","C:\\Users\\Jarvis\\DZK_Vote\\src\\App.js":"2","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\index.js":"3","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Navigation.jsx":"4","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Footer.jsx":"5","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Home.jsx":"6","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Contact.jsx":"7","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\About.jsx":"8"},{"size":180,"mtime":1619912429828,"results":"9","hashOfConfig":"10"},{"size":596,"mtime":1619912429781,"results":"11","hashOfConfig":"10"},{"size":243,"mtime":1619912429814,"results":"12","hashOfConfig":"10"},{"size":1481,"mtime":1619993898503,"results":"13","hashOfConfig":"10"},{"size":368,"mtime":1619912429809,"results":"14","hashOfConfig":"10"},{"size":655,"mtime":1619912429810,"results":"15","hashOfConfig":"10"},{"size":3256,"mtime":1619993898419,"results":"16","hashOfConfig":"10"},{"size":7864,"mtime":1619993898320,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zbozej",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"C:\\Users\\Jarvis\\DZK_Vote\\src\\index.js",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\App.js",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\index.js",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Navigation.jsx",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Footer.jsx",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Home.jsx",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Contact.jsx",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\About.jsx",["35","36"],"import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport Web3 from 'web3';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nclass About extends React.Component{\r\n  \r\n      //we want to talk to the blockchain by using WEB3\r\n      //Metamask is a wallet , in order to connect to the blockchain & wallet you need WEB3 \r\n      async componentWillMount() {\r\n        //start these functions when component is made\r\n       // await this.connect_web3()\r\n        //then fetch the ethereum account from metamask \r\n       // await this.fetch_account()\r\n        \r\n    \r\n      }\r\n      constructor(props)\r\n      {\r\n        super(props)\r\n        this.state = {\r\n          account:''\r\n          ,fields:{}\r\n          ,errors:{}\r\n          \r\n        }\r\n      }\r\n    \r\n      async connect_web3()\r\n      {\r\n        if (window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n        else {\r\n          window.alert('Non-Ethereum browser detected. You should download Metamask')\r\n        }\r\n      }\r\n    \r\n      async fetch_account()\r\n      {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        console.log(accounts) \r\n        this.setState({account : accounts[0]})\r\n      }\r\n\r\n      handleValidation(){\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        //ballot name \r\n        if(!fields[\"BallotName\"]){\r\n           formIsValid = false;\r\n           errors[\"BallotName\"] = \"Cannot be empty\";\r\n        }\r\n        \r\n\r\n        //Candidate 1  \r\n        if(!fields[\"Cand1\"]){\r\n          formIsValid = false;\r\n          errors[\"Cand1\"] = \"Cannot be empty\";\r\n        }\r\n        \r\n        //Candidate 2 \r\n       if(!fields[\"Cand2\"]){\r\n        formIsValid = false;\r\n        errors[\"Cand2\"] = \"Cannot be empty\";\r\n      }\r\n        //Date of registration \r\n        if(!fields[\"date_Reg_start\"]){\r\n          formIsValid = false;\r\n          errors[\"date_Reg_start\"] = \"Date is empty !\";\r\n        }\r\n        //Time of registration \r\n        if(!fields[\"Time_Reg_start\"]){\r\n          formIsValid = false;\r\n          errors[\"Time_Reg_start\"] = \"Time is empty !\";\r\n        }\r\n        //Date of reg end\r\n        if(!fields[\"date_Reg_end\"]){\r\n          formIsValid = false;\r\n          errors[\"date_Reg_end\"] = \"Date is empty !\";\r\n        }\r\n\r\n        //Time of reg end\r\n        if(!fields[\"Time_Reg_end\"]){\r\n          formIsValid = false;\r\n          errors[\"Time_Reg_end\"] = \"Time is empty !\";\r\n        }\r\n\r\n        if(!fields[\"date_vote_end\"]){\r\n          formIsValid = false;\r\n          errors[\"date_vote_end\"] = \"Date is empty !\";\r\n        }\r\n\r\n        //Time of vote end\r\n        if(!fields[\"Time_vote_end\"]){\r\n          formIsValid = false;\r\n          errors[\"Time_vote_end\"] = \"Time is empty !\";\r\n        }\r\n  \r\n\r\n        if(!fields[\"txtfile\"]){\r\n          formIsValid = false;\r\n          errors[\"txtfile\"] = \"Please attach a text file !\";\r\n        }\r\n\r\n        \r\n\r\n       this.setState({errors: errors});\r\n       return formIsValid;\r\n   }\r\n    \r\n   contactSubmit(e){\r\n        e.preventDefault();\r\n\r\n        if(this.handleValidation()){\r\n           alert(\"Form submitted\");\r\n        }else{\r\n           alert(\"Form has errors.\")\r\n        }\r\n  \r\n    }\r\n      \r\n      handleChange(field, e){         \r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;        \r\n        this.setState({fields});\r\n    }\r\n      \r\n\r\n  render(){\r\n    \r\n    return (\r\n    \r\n    <div >\r\n      \r\n        <div >\r\n           \r\n          <form onSubmit = {this.contactSubmit.bind(this)} className= \"form\">\r\n            <br></br>\r\n            <label htmlFor=\"Contract-name\">Ballot Name</label>\r\n            <input type=\"text\" id=\"Contract-name\" name=\"Ballot Name\" placeholder=\"Enter the name of ballot\" onChange={this.handleChange.bind(this, \"BallotName\")} value={this.state.fields[\"BallotName\"]}/>\r\n            <span style={{color: \"red\"}}>{this.state.errors[\"BallotName\"]}</span>\r\n            <br />\r\n            <label htmlFor=\"Candidate-Name\"> Write your options </label>\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n              <input type=\"text\" id=\"Cand-1\" name=\"Cand-1\" placeholder=\"Enter the first option\" onChange={this.handleChange.bind(this, \"Cand1\")} value={this.state.fields[\"Cand1\"]} />\r\n              <input type=\"text\" id=\"Cand-2\" name=\"Cand-2\" placeholder=\"Enter the second option\" onChange={this.handleChange.bind(this, \"Cand2\")} value={this.state.fields[\"Cand2\"]} />\r\n            </div>\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n            <span style={{color: \"red\"}}>{this.state.errors[\"Cand1\"]}</span> \r\n            <span style={{color: \"red\"}}>{this.state.errors[\"Cand2\"]}</span>\r\n            </div>\r\n            <br />\r\n            <label htmlFor=\"TimeStamps\">Enter the timestamp of each phase : <br /> </label>\r\n            <br /><br />\r\n            <label htmlFor=\"Reg-Time\">Registration phase start &emsp;</label> \r\n            <input id=\"date_Reg_Start\" type=\"date\" onChange={this.handleChange.bind(this, \"date_Reg_start\")} value={this.state.fields[\"date_Reg_start\"]}/>\r\n            \r\n            <input id=\"time_Reg_Start\" type=\"time\" onChange={this.handleChange.bind(this, \"Time_Reg_start\")} value={this.state.fields[\"Time_Reg_start\"]}/>\r\n            <span style={{color: \"red\"}}>{this.state.errors[\"date_Reg_start\"]}</span> \r\n            <span style={{color: \"red\"}}>{this.state.errors[\"Time_Reg_start\"]}</span> \r\n            \r\n            <label htmlFor=\"Reg-Time\">&emsp;Registration phase end&emsp;</label>\r\n            <input id=\"date_Reg_End\" type=\"date\" onChange={this.handleChange.bind(this, \"date_Reg_end\")} value={this.state.fields[\"date_Reg_end\"]}/>\r\n            <input id=\"time_Reg_End\" type=\"time\" onChange={this.handleChange.bind(this, \"Time_Reg_end\")} value={this.state.fields[\"Time_Reg_end\"]}/>\r\n            <span style={{color: \"red\"}}>{this.state.errors[\"date_Reg_end\"]}</span> \r\n            <span style={{color: \"red\"}}>{this.state.errors[\"Time_Reg_end\"]}</span>\r\n            \r\n            <label htmlFor=\"Reg-Time\" style={{color: '#db1818'}}>&emsp;Voting phase will start automatically after registration ends</label>\r\n            <br /><br />\r\n            <label htmlFor=\"Reg-Time\">Voting phase end &emsp;</label>\r\n            <input id=\"date_Vote_End\" type=\"date\" onChange={this.handleChange.bind(this, \"date_vote_end\")} value={this.state.fields[\"date_vote_end\"]}/>\r\n            <input id=\"time_Vote_End\" type=\"time\" onChange={this.handleChange.bind(this, \"Time_vote_end\")} value={this.state.fields[\"Time_vote_end\"]}/>\r\n            <span style={{color: \"red\"}}>{this.state.errors[\"date_vote_end\"]}</span> \r\n            <span style={{color: \"red\"}}>{this.state.errors[\"Time_vote_end\"]}</span> \r\n            \r\n            <label htmlFor=\"Tally\" style={{color: '#db1818'}}>&emsp;Tally phase will start automatically after voting phase is over </label>\r\n            <br /><br />\r\n            \r\n            <label htmlfor=\"myfile\">Select a text file containing the eligible voter's addresses: &emsp;&emsp; </label>\r\n            \r\n            <input type=\"file\" id=\"myfile\" name=\"myfile\" onChange={this.handleChange.bind(this, \"txtfile\")} value={this.state.fields[\"txtfile\"]}></input>\r\n            <span style={{color: \"red\"}}>{this.state.errors[\"txtfile\"]}</span> \r\n            <br></br>\r\n            <br></br>\r\n            <input type= \"submit\"/>\r\n            <Link to=\"/\" type=\"submit\" className=\"Button\" >Create Ballot</Link>\r\n            \r\n            \r\n          </form>\r\n\r\n        </div>\r\n        \r\n        \r\n       \r\n      </div>\r\n      \r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n\r\n\r\n",{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":16},{"ruleId":"37","severity":1,"message":"41","line":4,"column":16,"nodeType":"39","messageId":"40","endLine":4,"endColumn":26},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'withRouter' is defined but never used."]