[{"C:\\Users\\Jarvis\\DZK_Vote\\src\\index.js":"1","C:\\Users\\Jarvis\\DZK_Vote\\src\\App.js":"2","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\index.js":"3","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Navigation.jsx":"4","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Footer.jsx":"5","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Home.jsx":"6","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\About.jsx":"7","C:\\Users\\Jarvis\\DZK_Vote\\src\\web3-context.js":"8","C:\\Users\\Jarvis\\DZK_Vote\\src\\getWeb3.js":"9","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Vote.jsx":"10"},{"size":180,"mtime":1619912429828,"results":"11","hashOfConfig":"12"},{"size":1336,"mtime":1621355797641,"results":"13","hashOfConfig":"12"},{"size":237,"mtime":1621355137165,"results":"14","hashOfConfig":"12"},{"size":3084,"mtime":1621433415861,"results":"15","hashOfConfig":"12"},{"size":364,"mtime":1621297710742,"results":"16","hashOfConfig":"12"},{"size":1837,"mtime":1621352088600,"results":"17","hashOfConfig":"12"},{"size":9837,"mtime":1621374107569,"results":"18","hashOfConfig":"12"},{"size":1230,"mtime":1620938343599,"results":"19","hashOfConfig":"12"},{"size":1182,"mtime":1620938343598,"results":"20","hashOfConfig":"12"},{"size":2869,"mtime":1621207800010,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"zbozej",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Jarvis\\DZK_Vote\\src\\index.js",[],["46","47"],"C:\\Users\\Jarvis\\DZK_Vote\\src\\App.js",["48"],"import React, {Component} from \"react\";\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport {About, Vote, Footer, Home, Navigation} from \"./components\";\r\nimport {Web3Context, loadWeb3} from \"./web3-context\";\r\n\r\n// initialize the global context\r\n\r\nclass App extends Component {\r\n\r\n    state = {web3: null};\r\n\r\n    componentDidMount = async () => {\r\n        const loadedWeb3 = await loadWeb3();\r\n        // the global context that will provide the web3 instances for the whole app\r\n        this.setState({web3: loadedWeb3});\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.web3) {\r\n            return <h2>Loading Web3, accounts, and contract...</h2>;\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <Web3Context.Provider value={this.state.web3}>\r\n                    <Router>\r\n                        <Navigation/>\r\n                        <Switch>\r\n                            <Route path=\"/\" exact component={() => <Home/>}/>\r\n                            <Route path=\"/about\" exact component={() => <About/>}/>\r\n                            <Route path=\"/vote\" exact component={() => <Vote/>}/>\r\n                        </Switch>\r\n                    </Router>\r\n                </Web3Context.Provider>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default App;","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\index.js",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Navigation.jsx",["49","50","51","52","53"],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Footer.jsx",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Home.jsx",["54","55","56","57","58","59"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Logo from \"./images/create-ballot2.png\";\r\nimport Vote from \"./images/vote.png\"\r\nimport banner from \"./images/4448.jpg\"\r\nimport red from \"./images/icon red.png\"\r\nimport green from \"./images/icon green.png\"\r\nimport blue from \"./images/icon blue.png\"\r\n\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <div className=\"media\">\r\n        <div className=\"media-body title\">\r\n          <h2 className=\"mt-0 mb-1 words\">DZK Electronic Voting System</h2><br></br><br></br>\r\n          <div className=\"row words\">\r\n            <img className=\"blue-icon\" src={blue}></img>\r\n            <h1 className=\"words\">Decentralized</h1>\r\n            <br></br>\r\n          </div>\r\n\r\n          <div className=\"row words\">\r\n            <img className=\"red-icon\" src={red}></img>\r\n            <h1 className=\"words\">Secure</h1>\r\n            <br></br>\r\n          </div>\r\n\r\n          <div className=\"row words\">\r\n            <img className=\"green-icon\" src={green}></img>\r\n            <h1 className=\"words\">Trustworthy</h1>\r\n            <br></br>\r\n          </div>\r\n        </div>\r\n        <img className=\"banner rouned float-right ml-3\" src={banner}></img>\r\n      </div>\r\n\r\n      <div className=\"row justify-content-md-center text-center\">\r\n        <div className=\"col col-lg-2 options options-left icons\">\r\n          <Link to=\"/about\">\r\n            <img className=\"img-fluid\" src={Logo}></img><br></br>\r\n            <h4 className=\"text-center\">Create-ballot</h4>\r\n          </Link>\r\n        </div>\r\n       <div class=\"col col-lg-2 options options-right icons\">\r\n          <Link to=\"/Vote\">\r\n            <img src={Vote}></img><br></br>\r\n            <h4 className=\"text-center\">Vote</h4>\r\n         </Link>\r\n       </div>\r\n     </div>\r\n       \r\n    </div> \r\n  );\r\n}\r\n\r\nexport default Home;","C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\About.jsx",["60","61","62"],"import React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";                                                              \r\nimport {Web3Context} from \"../web3-context\";\r\n\r\nclass About extends Component {\r\n\r\n    static contextType = Web3Context;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: ''\r\n            , fields: {}\r\n            , errors: {}\r\n            , ballot: true\r\n            , ballot_confirm: false\r\n\r\n        }\r\n    }\r\n\r\n    contactSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (this.handleValidation()) {\r\n            this.open_web3();\r\n            \r\n            this.setState({ ballot: false });\r\n            this.setState({ballot_confirm: true});\r\n        } else {\r\n            alert(\"Form has errors.\")\r\n        }\r\n\r\n    }\r\n    open_web3()\r\n    {\r\n        alert(\"Success\");\r\n    }\r\n    handleChange(field, e) {\r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;\r\n        this.setState({fields});\r\n    }\r\n\r\n\r\n    \r\n    handleValidation() {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n        let today = new Date();\r\n\r\n        //check if fields is not empty \r\n        formIsValid = this.handleEmpty(\"BallotName\",formIsValid,fields,errors ,1); \r\n        formIsValid = this.handleEmpty(\"Cand1\" , formIsValid,fields,errors,1 );\r\n        formIsValid = this.handleEmpty(\"Cand2\" , formIsValid,fields,errors,1 );\r\n\r\n        //handle date/time empty fields \r\n        formIsValid = this.handleEmpty(\"date_Reg_start\" , formIsValid,fields,errors,2 );\r\n        formIsValid = this.handleEmpty(\"Time_Reg_start\" , formIsValid,fields,errors,3 );\r\n        formIsValid = this.handleEmpty(\"date_Reg_end\" , formIsValid,fields,errors,2 );\r\n        formIsValid = this.handleEmpty(\"Time_Reg_end\" , formIsValid,fields,errors,3 );\r\n        formIsValid = this.handleEmpty(\"date_vote_end\" , formIsValid,fields,errors,2 );\r\n        formIsValid = this.handleEmpty(\"Time_vote_end\" , formIsValid,fields,errors,3 );\r\n\r\n        //check if txt file is not attached\r\n        formIsValid = this.handleEmpty(\"txtfile\" , formIsValid,fields,errors,4 );\r\n\r\n        var date1 = new Date(fields[\"date_Reg_start\"]);\r\n        var date2 = new Date(fields[\"date_Reg_end\"]);\r\n        var date3 = new Date(fields[\"date_vote_end\"]);\r\n        // we need to compare with current date \r\n        //first we need to switch the fields to become dates \r\n        \r\n        if(date1.getTime() <= today.getTime())\r\n        {\r\n            formIsValid= false;\r\n            errors[\"date_Reg_start\"] = \"This date has already passed !\";\r\n        }\r\n        if(date2 <= today.getTime())\r\n        {\r\n            formIsValid= false;\r\n            errors[\"date_Reg_end\"] = \"This date has already passed !\";\r\n        }\r\n        if(date3 <= today.getTime())\r\n        {\r\n            formIsValid= false;\r\n            errors[\"date_vote_end\"] = \"This date has already passed !\" ;\r\n        }\r\n        \r\n       \r\n       \r\n        \r\n\r\n        if(fields[\"date_Reg_start\"] >= fields[\"date_Reg_end\"])\r\n        {\r\n            formIsValid= false;\r\n            errors[\"date_Reg_start\"] = \"Invalid date selected\";\r\n            errors[\"date_Reg_end\"] = \"Invalid date selected\";\r\n        }\r\n\r\n\r\n        //Check date of the vote to be after both the start of registration and end \r\n\r\n        if(fields[\"date_vote_end\"] <= fields[\"date_Reg_start\"] || fields[\"date_vote_end\"] <= fields[\"date_Reg_end\"])\r\n        {\r\n            formIsValid= false;\r\n            errors[\"date_vote_end\"] = \"Invalid date selected !\";\r\n        }\r\n        this.setState({errors: errors});\r\n        return formIsValid;\r\n    }\r\n    handleEmpty(string , valid , fields , errors,num)\r\n    {\r\n        if(!fields[string])\r\n        {\r\n            if(num == 1)\r\n            errors[string] = \"Empty field!\";\r\n            else if(num ==2)\r\n            errors[string] = \"Date is empty !\";\r\n            else if(num == 3)\r\n            errors[string] = \"Time is empty !\";\r\n            else\r\n            errors[string] = \"Please attach a text file !\";\r\n\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n  \r\n\r\n    \r\n    \r\n\r\n    render() {\r\n        const { ballot, ballot_confirm } = this.state;\r\n        \r\n        return (\r\n\r\n            <div>\r\n\r\n        {ballot && // show when ballot = true \r\n                <div>\r\n                    <h3>[test] Account 1 address = {this.context.account.toString()} </h3>\r\n                    <form onSubmit={this.contactSubmit.bind(this)} className=\"form\">\r\n                        <br></br>\r\n                        <label htmlFor=\"Contract-name\">Ballot Name</label>\r\n                        <input type=\"text\" id=\"Contract-name\" name=\"Ballot Name\" placeholder=\"Enter the name of ballot\"\r\n                               onChange={this.handleChange.bind(this, \"BallotName\")}\r\n                               value={this.state.fields[\"BallotName\"]}/>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"BallotName\"]}</span>\r\n                        <br/>\r\n                        <label htmlFor=\"Candidate-Name\"> Write your options </label>\r\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                            <input type=\"text\" id=\"Cand-1\" name=\"Cand-1\" placeholder=\"Enter the first option\"\r\n                                   onChange={this.handleChange.bind(this, \"Cand1\")} value={this.state.fields[\"Cand1\"]}/>\r\n                            <input type=\"text\" id=\"Cand-2\" name=\"Cand-2\" placeholder=\"Enter the second option\"\r\n                                   onChange={this.handleChange.bind(this, \"Cand2\")} value={this.state.fields[\"Cand2\"]}/>\r\n                        </div>\r\n                        <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                            <span style={{color: \"red\"}}>{this.state.errors[\"Cand1\"]}</span>\r\n                            <span style={{color: \"red\"}}>{this.state.errors[\"Cand2\"]}</span>\r\n                        </div>\r\n                        <br/>\r\n                        <label htmlFor=\"TimeStamps\">Enter the timestamp of each phase : <br/> </label>\r\n                        <br/><br/>\r\n                        <label htmlFor=\"Reg-Time\">Registration phase start &emsp;</label>\r\n                        <input id=\"date_Reg_Start\" type=\"date\" onChange={this.handleChange.bind(this, \"date_Reg_start\")}\r\n                               value={this.state.fields[\"date_Reg_start\"]}/>\r\n\r\n                        <input id=\"time_Reg_Start\" type=\"time\" onChange={this.handleChange.bind(this, \"Time_Reg_start\")}\r\n                               value={this.state.fields[\"Time_Reg_start\"]}/>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"date_Reg_start\"]}</span>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"Time_Reg_start\"]}</span>\r\n\r\n                        <label htmlFor=\"Reg-Time\">&emsp;Registration phase end&emsp;</label>\r\n                        <input id=\"date_Reg_End\" type=\"date\" onChange={this.handleChange.bind(this, \"date_Reg_end\")}\r\n                               value={this.state.fields[\"date_Reg_end\"]}/>\r\n                        <input id=\"time_Reg_End\" type=\"time\" onChange={this.handleChange.bind(this, \"Time_Reg_end\")}\r\n                               value={this.state.fields[\"Time_Reg_end\"]}/>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"date_Reg_end\"]}</span>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"Time_Reg_end\"]}</span>\r\n\r\n                        <label htmlFor=\"Reg-Time\" style={{color: '#db1818'}}>&emsp; <mark><b>Voting phase will start automatically\r\n                            after registration ends </b></mark> </label>\r\n                        <br/><br/>\r\n                        <label htmlFor=\"Reg-Time\">Voting phase end &emsp;</label>\r\n                        <input id=\"date_Vote_End\" type=\"date\" onChange={this.handleChange.bind(this, \"date_vote_end\")}\r\n                               value={this.state.fields[\"date_vote_end\"]}/>\r\n                        <input id=\"time_Vote_End\" type=\"time\" onChange={this.handleChange.bind(this, \"Time_vote_end\")}\r\n                               value={this.state.fields[\"Time_vote_end\"]}/>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"date_vote_end\"]}</span>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"Time_vote_end\"]}</span>\r\n\r\n                        <label htmlFor=\"Tally\" style={{color: '#db1818'}}>&emsp; <mark> <b> Tally phase will start automatically\r\n                            after voting phase is over</b></mark> </label>\r\n                        <br/><br/>\r\n\r\n                        <label htmlfor=\"myfile\">Select a text file containing the eligible voter's\r\n                            addresses: &emsp;&emsp; </label>\r\n\r\n                        <input type=\"file\" id=\"myfile\" name=\"myfile\" onChange={this.handleChange.bind(this, \"txtfile\")}\r\n                               value={this.state.fields[\"txtfile\"]}></input>\r\n                        <span style={{color: \"red\"}}>{this.state.errors[\"txtfile\"]}</span>\r\n                        <br></br>\r\n                        <br></br>\r\n                        <input type=\"submit\"/>\r\n                        <Link to=\"/\" type=\"submit\" className=\"Button\">Create Ballot</Link>\r\n                    </form>\r\n\r\n                </div>\r\n                }\r\n\r\n                {ballot_confirm && // when creation is complete\r\n                    <h2 style={{margin: 60}}>\r\n                            Ballot {this.state.fields[\"BallotName\"]} is created !! \r\n                    </h2>\r\n\r\n                }\r\n\r\n\r\n            \r\n\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\nexport default About;\r\n\r\n\r\n","C:\\Users\\Jarvis\\DZK_Vote\\src\\web3-context.js",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\getWeb3.js",[],"C:\\Users\\Jarvis\\DZK_Vote\\src\\components\\Vote.jsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":3,"column":22,"nodeType":"69","messageId":"70","endLine":3,"endColumn":28},{"ruleId":"67","severity":1,"message":"71","line":23,"column":13,"nodeType":"69","messageId":"70","endLine":23,"endColumn":19},{"ruleId":"67","severity":1,"message":"72","line":23,"column":21,"nodeType":"69","messageId":"70","endLine":23,"endColumn":35},{"ruleId":"73","severity":1,"message":"74","line":65,"column":19,"nodeType":"75","endLine":65,"endColumn":170},{"ruleId":"76","severity":1,"message":"77","line":66,"column":21,"nodeType":"75","endLine":66,"endColumn":60},{"ruleId":"73","severity":1,"message":"74","line":76,"column":25,"nodeType":"75","endLine":76,"endColumn":59},{"ruleId":"76","severity":1,"message":"77","line":19,"column":13,"nodeType":"75","endLine":19,"endColumn":51},{"ruleId":"76","severity":1,"message":"77","line":25,"column":13,"nodeType":"75","endLine":25,"endColumn":49},{"ruleId":"76","severity":1,"message":"77","line":31,"column":13,"nodeType":"75","endLine":31,"endColumn":53},{"ruleId":"76","severity":1,"message":"77","line":36,"column":9,"nodeType":"75","endLine":36,"endColumn":70},{"ruleId":"76","severity":1,"message":"77","line":42,"column":13,"nodeType":"75","endLine":42,"endColumn":51},{"ruleId":"76","severity":1,"message":"77","line":48,"column":13,"nodeType":"75","endLine":48,"endColumn":29},{"ruleId":"78","severity":1,"message":"79","line":116,"column":20,"nodeType":"80","messageId":"81","endLine":116,"endColumn":22},{"ruleId":"78","severity":1,"message":"79","line":118,"column":25,"nodeType":"80","messageId":"81","endLine":118,"endColumn":27},{"ruleId":"78","severity":1,"message":"79","line":120,"column":25,"nodeType":"80","messageId":"81","endLine":120,"endColumn":27},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'ballot' is assigned a value but never used.","'ballot_confirm' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]